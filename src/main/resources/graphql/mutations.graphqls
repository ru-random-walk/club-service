input MembersConfirmInput {
    requiredConfirmationNumber: Int! @Min(value: 1, message: "requiredConfirmationNumber must be bigger or equals than 1")
    approversToNotifyCount: Int @Min(value: 1, message: "approversToNotifyCount must be bigger or equals than 1")
}

input FormInput {
    questions: [QuestionInput!]!
}

input QuestionInput @ValidQuestion {
    text: String! @Size(max: 200, message: "text size must be less or equals 200")
    answerOptions: [String!]! @ContainerSize(min: 1, max: 10, message: "answerOptions size must be between 1 and 10")
    answerType: AnswerType!
    correctOptionNumbers: [Int!]! @ContainerSize(min: 1, max: 10, message: "answerOptions size must be between 1 and 10")
}

input FormAnswerInput {
    questionAnswers: [QuestionAnswerInput!]!
}

input QuestionAnswerInput {
    optionNumbers: [Int!]!
}

input RegisteredUserInfoEvent {
    id: ID!
    fullName: String!
}

type Mutation {
    # Club mutations
    createClub(name: String!, description: String): Club!
    createClubWithMembersConfirmApprovement(name: String!, description: String, membersConfirm: MembersConfirmInput! @ValidMembersConfirm): Club!
    createClubWithFormApprovement(name: String!, description: String, form: FormInput!): Club!
    removeClubWithAllItsData(clubId: ID!): ID!

    # Approvement mutations
    addClubApprovementMembersConfirm(clubId: ID!, membersConfirm: MembersConfirmInput! @ValidMembersConfirm): Approvement!
    addClubApprovementForm(clubId: ID!, form: FormInput!): Approvement!

    updateClubApprovementMembersConfirm(approvementId: ID!, membersConfirm: MembersConfirmInput! @ValidMembersConfirm): Approvement!
    updateClubApprovementForm(approvementId: ID!, form: FormInput!): Approvement!

    removeClubApprovement(approvementId: ID!): ID!

    # Member mutations
    changeMemberRole(clubId: ID!, memberId: ID!, role: MemberRole!): Member!
    removeMemberFromClub(clubId: ID!, memberId: ID!): ID!
    addMemberInClub(clubId: ID!, memberId: ID!): Member!

    # Answer mutations
    createApprovementAnswerMembersConfirm(approvementId: ID!): Answer!
    createApprovementAnswerForm(approvementId: ID!, formAnswer: FormAnswerInput!): Answer!

    updateAnswerForm(answerId: ID!, formAnswer: FormAnswerInput!): Answer!

    setAnswerStatusToSent(answerId: ID!): Answer!

    # Confirmation mutations
    tryJoinInClub(userId: ID!, clubId: ID!): Member!
    approveConfirmation(confirmationId: ID!): Confirmation!
    rejectConfirmation(confirmationId: ID!): Confirmation!

    # Test event contract handlers (only with TEST role and testing purposes)
    listenRegisteredUserInfoEvent(event: RegisteredUserInfoEvent!): ID!
}