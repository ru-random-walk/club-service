plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id "com.netflix.dgs.codegen" version "7.0.3"
}

group = 'ru.random.walk'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

generateJava{
    schemaPaths = [
            "${projectDir}/src/main/resources/graphql/queries.graphqls",
            "${projectDir}/src/main/resources/graphql/mutations.graphqls",
            "${projectDir}/src/main/resources/graphql/enums.graphqls",
            "${projectDir}/src/main/resources/graphql/types.graphqls",
    ] // List of directories containing schema files
    packageName = 'ru.random.walk.club_service.model.graphql' // The package name to use to generate sources
}

repositories {
    mavenLocal()
    mavenCentral()
    repositories {
        mavenCentral()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ru-random-walk/event-exchange-contract")
            credentials {
                username = project.findProperty("user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ru-random-walk/storage-client")
            credentials {
                username = project.findProperty("user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

dependencies {
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter:1.15.3'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.flywaydb:flyway-database-postgresql:10.18.0'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.mapstruct:mapstruct:1.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.graphql-java:graphql-java-extended-validation'
    implementation 'ru.random.walk:event-exchange-contract:1.2.4'
    implementation 'ru.random.walk:storage-client:2.0.1'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
}

tasks.named('test') {
    useJUnitPlatform()
}
